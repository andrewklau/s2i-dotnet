#!/bin/bash -e
source /opt/app-root/etc/dotnet_environment

if [ -d /tmp/artifacts/ ]; then
    echo "---> Restoring build artifacts..."
    mv -v /tmp/artifacts/* ./
fi

if [ -n "${DOTNET_NPM_TOOLS}" ]; then
  echo "---> Installing npm tools ..."

  if [ ! -z $NPM_MIRROR ]; then
    echo "---> Setting npm mirror"
    npm config set registry $NPM_MIRROR
  fi

  pushd $HOME
  npm install ${DOTNET_NPM_TOOLS}
  popd
fi

echo "---> Installing application source ..."
mv /tmp/src/* ./

# Build nuget sources list for when doing the restore
RESTORE_OPTIONS=""
for SOURCE in $DOTNET_RESTORE_SOURCES; do
  RESTORE_OPTIONS="$RESTORE_OPTIONS --source $SOURCE"
done

echo "---> Installing dependencies ..."
dotnet restore $RESTORE_OPTIONS

# run tests
for TEST_PROJECT in $DOTNET_TEST_PROJECTS; do
    echo "---> Running test project: $TEST_PROJECT..."
    dotnet test "$TEST_PROJECT" -f "$DOTNET_FRAMEWORK"
done

DOTNET_CONFIGURATION="${DOTNET_CONFIGURATION:-Release}"
# Set dotnet project to first *.csproj file
if [ -z "$DOTNET_PROJECT" ]; then
  DOTNET_PROJECT="$(ls *.csproj | head -1)"
fi

# publish application
echo "---> Publishing application ..."
dotnet publish -f "$DOTNET_FRAMEWORK" -c "$DOTNET_CONFIGURATION" "$DOTNET_PROJECT" -o "$DOTNET_PUBLISH_PATH"

APP_DLL_NAME="$(basename $DOTNET_PROJECT .csproj)"

# check if the assembly used by the script exists
if [ ! -f "$DOTNET_PUBLISH_PATH/${APP_DLL_NAME}.dll" ]; then
  echo "error: Build output does not contain entrypoint assembly: ${APP_DLL_NAME}.dll"
  exit 1
fi

# Create run script in publish folder
cat << EOF >"$DOTNET_RUN_SCRIPT"
#!/bin/bash
cd $DOTNET_PUBLISH_PATH
exec dotnet ${APP_DLL_NAME}.dll \$@
EOF
chmod +x "$DOTNET_RUN_SCRIPT"

# Fix source directory permissions
fix-permissions ./
# set permissions for any installed artifacts
fix-permissions /opt/app-root
